@model string
<!DOCTYPE html>
<html>

<head>
    <title>Map Features</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
</head>

<body>
    <div id="map" style="width: 100%; height: 700px;"></div>
    <script>
        var geoJsonData = @Html.Raw(Model); // Embed the model data directly in the page
        console.log(geoJsonData);
        document.addEventListener('DOMContentLoaded', function () {
            var mymap = L.map('map').setView([49.4925, -117.2942], 13);
            L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
                maxZoom: 17,
                attribution: 'Map data Â© <a href="https://opentopomap.org">OpenTopoMap</a> contributors'
            }).addTo(mymap);

            L.geoJSON(geoJsonData, {
                onEachFeature: function (feature, layer) {
                    if (feature.properties && feature.properties.PointName) {
                        // Bind hover to show popup
                        layer.on('mouseover', function (e) {
                            e.target.bindPopup(feature.properties.PointName + feature.properties.Buffer).openPopup();
                        });
                        layer.on('mouseout', function (e) {
                            e.target.closePopup();
                        });
                    }
                    // Check if there is a Buffer attribute and draw a circle
                    if (feature.properties.Buffer > 0 && feature.properties.FeatureType == "NoFlyNode") {
                        L.circle(layer.getLatLng(), {
                            color: 'red',
                            fillColor: 'orange',
                            fillOpacity: 0.5,
                            radius: feature.properties.Buffer // Radius in meters; adjust as necessary for your data
                        }).addTo(mymap);
                    }
                }
            }).addTo(mymap);

            //marker animation

            var marker = L.marker([49.4925, -117.2942]).addTo(mymap).bindPopup("Initial Position").openPopup();
            var connection = new signalR.HubConnectionBuilder().withUrl("/coordinateHub").build();
            var animationQueue = [];
            var animating = false;

            function animateMarker() {
                if (animationQueue.length === 0) {
                    animating = false;
                    return;
                }

                animating = true;
                var newLatLng = animationQueue.shift();
                var startLatLng = marker.getLatLng();
                var duration = 1000; // Adjust duration based on frequency and distance if necessary
                var startTime;

                function animate(timestamp) {
                    if (!startTime) startTime = timestamp;
                    var progress = (timestamp - startTime) / duration;
                    var lat = startLatLng.lat + (newLatLng.lat - startLatLng.lat) * progress;
                    var lng = startLatLng.lng + (newLatLng.lng - startLatLng.lng) * progress;
                    marker.setLatLng([lat, lng]).update();

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else {
                        animating = false;
                        animateMarker(); // Start next animation if there's more in the queue
                    }
                }
                requestAnimationFrame(animate);
            }

            connection.on("ReceiveCoordinate", function (coord) {
                console.log("Received coordinate:", coord);
                var cleanCoord = coord.replace(/[()]/g, '');
                var parts = cleanCoord.split(', ');
                var lat = parseFloat(parts[1]);
                var lng = parseFloat(parts[0]);

                if (!isNaN(lat) && !isNaN(lng)) {
                    animationQueue.push({ lat: lat, lng: lng });
                    if (!animating) {
                        animateMarker();
                    }
                } else {
                    console.error("Invalid coordinates:", parts);
                }
            });

            connection.start().then(function () {
                console.log("SignalR connection established.");
            }).catch(function (err) {
                console.error("SignalR connection error:", err.toString());
            });
        });

    </script>
    @if (ViewBag.Message != null)
    {
        <p>@ViewBag.Message</p>
    }
</body>

</html>
